matScalarMass = Table[If[mixonMassCode`Private`nBL == 
        mixonMassCode`Private`nBR && mixonMassCode`Private`nFL == 
        mixonMassCode`Private`nFR, Catch[ArrayFlatten[
        Outer[mixonMassCode`Private`primBlockNtoN[
          mixonMassCode`Private`scalarMassMonomialBlock], 
         (If[Length[#1] == 0, Throw[{}], #1] & )[
          Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
             Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], 
             {{}}]][[mixonMassCode`Private`nBL + 1,
           mixonMassCode`Private`nFL + 1]]], 
         (If[Length[#1] == 0, Throw[{}], #1] & )[
          Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
             Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], 
             {{}}]][[mixonMassCode`Private`nBR + 1,
           mixonMassCode`Private`nFR + 1]]], 1]]], 
      SparseArray[{}, {mixonMassCode`Private`stateCount[
         Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
            Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], {{}}]][[
          mixonMassCode`Private`nBL + 1,mixonMassCode`Private`nFL + 1]]], 
        mixonMassCode`Private`stateCount[Insert[PadRight[{}, Insert[0, 0, 2], 
            {{}}], PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{1, 1}, 
            Insert[0, 0, 2], {{}}]][[mixonMassCode`Private`nBR + 1,
          mixonMassCode`Private`nFR + 1]]]}]], {mixonMassCode`Private`nBL, 0, 
      2}, {mixonMassCode`Private`nBR, 0, 2}, {mixonMassCode`Private`nFL, 0, 
      -1 + {3}[[2]]}, {mixonMassCode`Private`nFR, 0, -1 + {3}[[2]]}]
 
mixonMassCode`Private`primBlockNtoN[mixonMassCode`Private`contraction_] = 
    Function[{mixonMassCode`Private`level1, mixonMassCode`Private`level2}, 
     With[{mixonMassCode`Private`lL = mixonMassCode`Private`level1["l"], 
       mixonMassCode`Private`lR = mixonMassCode`Private`level2["l"], 
       mixonMassCode`Private`degBL = mixonMassCode`Private`level1["degB"], 
       mixonMassCode`Private`degBR = mixonMassCode`Private`level2["degB"], 
       mixonMassCode`Private`degFL = mixonMassCode`Private`level1["degF"], 
       mixonMassCode`Private`degFR = mixonMassCode`Private`level2["degF"], 
       mixonMassCode`Private`nB = mixonMassCode`Private`level1["nB"], 
       mixonMassCode`Private`nF = mixonMassCode`Private`level2["nF"]}, 
      SparseArray[Outer[Total[Table[Flatten[#1[[mixonMassCode`Private`kL + 
                1]]] . mixonMassCode`Private`contraction[
              mixonMassCode`Private`nB, mixonMassCode`Private`nF, 
              {mixonMassCode`Private`degBL + mixonMassCode`Private`kL, 
               mixonMassCode`Private`degBR + mixonMassCode`Private`kR}, 
              {mixonMassCode`Private`degFL + mixonMassCode`Private`lL - 
                mixonMassCode`Private`kL, mixonMassCode`Private`degFR + 
                mixonMassCode`Private`lR - mixonMassCode`Private`kR}] . 
             Flatten[#2[[mixonMassCode`Private`kR + 1]]], 
            {mixonMassCode`Private`kL, 0, mixonMassCode`Private`lL}, 
            {mixonMassCode`Private`kR, 0, mixonMassCode`Private`lR}], 2] & , 
         mixonMassCode`Private`level1["states"], mixonMassCode`Private`level2[
          "states"], 1]]*mixonMassCode`Private`factor[
        mixonMassCode`Private`nB + (3*mixonMassCode`Private`nF)/2 + 
         mixonMassCode`Private`degBL + mixonMassCode`Private`degFL + 
         mixonMassCode`Private`lL, mixonMassCode`Private`nB + 
         (3*mixonMassCode`Private`nF)/2 + mixonMassCode`Private`degBR + 
         mixonMassCode`Private`degFR + mixonMassCode`Private`lR]]]
 
mixonMassCode`Private`factor[mixonMassCode`Private`\[CapitalDelta]_, 
     mixonMassCode`Private`\[CapitalDelta]p_] := 
    mixonMassCode`Private`factor[mixonMassCode`Private`\[CapitalDelta], 
      mixonMassCode`Private`\[CapitalDelta]p] = 
     (Sqrt[Gamma[2*mixonMassCode`Private`\[CapitalDelta]]*
         Gamma[2*mixonMassCode`Private`\[CapitalDelta]p]]*
       (-1)^(mixonMassCode`Private`\[CapitalDelta] - 
         mixonMassCode`Private`\[CapitalDelta]p))/
      Gamma[mixonMassCode`Private`\[CapitalDelta] + 
        mixonMassCode`Private`\[CapitalDelta]p - 1]
 
mixonMassCode`Private`scalarMassMonomialBlock[mixonMassCode`Private`nB_, 
     mixonMassCode`Private`nF_, {mixonMassCode`Private`degB1_, 
      mixonMassCode`Private`degB2_}, {mixonMassCode`Private`degF1_, 
      mixonMassCode`Private`degF2_}] := 
    mixonMassCode`Private`scalarMassMonomialBlock[mixonMassCode`Private`nB, 
      mixonMassCode`Private`nF, {mixonMassCode`Private`degB1, 
       mixonMassCode`Private`degB2}, {mixonMassCode`Private`degF1, 
       mixonMassCode`Private`degF2}] = 
     With[{mixonMassCode`Private`a1List = 
        (mixonMassCode`Private`cfBinCount[#1, 
           Max[mixonMassCode`Private`degB1, mixonMassCode`Private`degB2] + 
            1] & ) /@ mixonMassCode`Private`monomialsBoson[
          mixonMassCode`Private`nB, mixonMassCode`Private`degB1], 
       mixonMassCode`Private`a2List = (mixonMassCode`Private`cfBinCount[#1, 
           Max[mixonMassCode`Private`degB1, mixonMassCode`Private`degB2] + 
            1] & ) /@ mixonMassCode`Private`monomialsBoson[
          mixonMassCode`Private`nB, mixonMassCode`Private`degB2], 
       mixonMassCode`Private`b1List = (mixonMassCode`Private`cfBinCount[#1, 
           Max[mixonMassCode`Private`degF1, mixonMassCode`Private`degF2] + 
            1] & ) /@ mixonMassCode`Private`monomialsFermion[
          mixonMassCode`Private`nF, mixonMassCode`Private`degF1], 
       mixonMassCode`Private`b2List = (mixonMassCode`Private`cfBinCount[#1, 
           Max[mixonMassCode`Private`degF1, mixonMassCode`Private`degF2] + 
            1] & ) /@ mixonMassCode`Private`monomialsFermion[
          mixonMassCode`Private`nF, mixonMassCode`Private`degF2]}, 
      SparseArray[Outer[mixonMassCode`Private`scalarMassMixonContraction, 
        Flatten[Outer[List, mixonMassCode`Private`a1List, 
          mixonMassCode`Private`b1List, 1], 1], 
        Flatten[Outer[List, mixonMassCode`Private`a2List, 
          mixonMassCode`Private`b2List, 1], 1], 1]]]
 
mixonMassCode`Private`cfBinCount = CompiledFunction[{11, 12., 5468}, 
     {{_Integer, 1}, _Integer}, {{2, 1, 0}, {2, 0, 0}, {2, 1, 2}}, 
     {{0, {2, 0, 4}}, {1, {2, 0, 2}}}, {0, 10, 0, 0, 3}, 
     {{6, 0, 6}, {6, 4, 3}, {35, 6, 2, 2}, {6, 4, 5}, {3, 2}, 
      {36, 3, 4, 2, 2}, {4, 5, 6, -1}, {33, 0, 6}, {6, 4, 8}, {3, 6}, 
      {37, 0, 8, 2, 1}, {38, 2, 0, 1, 0, 9}, {37, 0, 8, 2, 1}, {12, 9, 2, 7}, 
      {39, 2, 0, 1, 0, 7}, {4, 8, 6, -5}, {1}}, 
     Function[{mixonMassCode`Private`k, mixonMassCode`Private`max}, 
      Module[{mixonMassCode`Private`lst}, mixonMassCode`Private`lst = 
         Table[0, {mixonMassCode`Private`max}]; 
        Scan[mixonMassCode`Private`lst[[#1]]++ & , mixonMassCode`Private`k]; 
        mixonMassCode`Private`lst]], Evaluate, LibraryFunction["/Users/liam/L\
ibrary/Mathematica/ApplicationData/CCompilerDriver/BuildFolder/Macintosh-414-\
51642/compiledFunction2.dylib", "compiledFunction2", 
      {{Integer, 1, "Constant"}, {Integer, 0, "Constant"}}, {Integer, 1}]]
 
mixonMassCode`Private`monomialsBoson[mixonMassCode`Private`n_, 
     mixonMassCode`Private`deg_] := mixonMassCode`Private`monomialsBoson[
      mixonMassCode`Private`n, mixonMassCode`Private`deg] = 
     IntegerPartitions[mixonMassCode`Private`deg + mixonMassCode`Private`n, 
      {mixonMassCode`Private`n}]
 
mixonMassCode`Private`monomialsFermion[mixonMassCode`Private`n_, 
     mixonMassCode`Private`deg_] := mixonMassCode`Private`monomialsFermion[
      mixonMassCode`Private`n, mixonMassCode`Private`deg] = 
     (#1 + Reverse[Range[mixonMassCode`Private`n] - 1] & ) /@ 
      mixonMassCode`Private`monomialsBoson[mixonMassCode`Private`n, 
       mixonMassCode`Private`deg + mixonMassCode`Private`n - 
        (mixonMassCode`Private`n*(mixonMassCode`Private`n + 1))/2]
 
mixonMassCode`Private`scalarMassMixonContraction[{mixonMassCode`Private`a_, 
      mixonMassCode`Private`b_}, {mixonMassCode`Private`ap_, 
      mixonMassCode`Private`bp_}] := If[mixonMassCode`Private`b != 
      mixonMassCode`Private`bp, 0, 
     mixonMassCode`Private`scalarMassScalarContraction[
      mixonMassCode`Private`a, mixonMassCode`Private`ap]]
 
Attributes[mixonMassCode`Private`scalarMassScalarContraction] = {Orderless}
 
mixonMassCode`Private`scalarMassScalarContraction[{mixonMassCode`Private`a__, 
      0}, {mixonMassCode`Private`ap__, 0}] := 
    mixonMassCode`Private`scalarMassScalarContraction[
     {mixonMassCode`Private`a}, {mixonMassCode`Private`ap}]
 
mixonMassCode`Private`scalarMassScalarContraction[mixonMassCode`Private`a_, 
     mixonMassCode`Private`ap_] := 
    mixonMassCode`Private`scalarMassScalarContraction[
      mixonMassCode`Private`a, mixonMassCode`Private`ap] = 
     Block[{mixonMassCode`Private`diff, mixonMassCode`Private`ki, 
       mixonMassCode`Private`kpj}, mixonMassCode`Private`diff = 
        mixonMassCode`Private`a - mixonMassCode`Private`ap; 
       Switch[Total[Abs[mixonMassCode`Private`diff]], 0, 
        Total[mixonMassCode`Private`ap], 2, mixonMassCode`Private`ki = 
          First[FirstPosition[mixonMassCode`Private`diff, 1]]; 
         mixonMassCode`Private`kpj = First[FirstPosition[
            mixonMassCode`Private`diff, -1]]; 
         Sqrt[If[mixonMassCode`Private`ki > mixonMassCode`Private`kpj, 
            mixonMassCode`Private`kpj/mixonMassCode`Private`ki, 
            mixonMassCode`Private`ki/mixonMassCode`Private`kpj]*
           mixonMassCode`Private`a[[mixonMassCode`Private`ki]]*
           mixonMassCode`Private`ap[[mixonMassCode`Private`kpj]]], _, 0]]
 
mixonMassCode`Private`stateCount[mixonMassCode`Private`lstOfLevels_] := 
    Total[(Length[#states] & ) /@ mixonMassCode`Private`lstOfLevels]
matScalarMass = Table[If[mixonMassCode`Private`nBL == 
        mixonMassCode`Private`nBR && mixonMassCode`Private`nFL == 
        mixonMassCode`Private`nFR, Catch[ArrayFlatten[
        Outer[mixonMassCode`Private`primBlockNtoN[
          mixonMassCode`Private`scalarMassMonomialBlock], 
         (If[Length[#1] == 0, Throw[{}], #1] & )[
          Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
             Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], 
             {{}}]][[mixonMassCode`Private`nBL + 1,
           mixonMassCode`Private`nFL + 1]]], 
         (If[Length[#1] == 0, Throw[{}], #1] & )[
          Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
             Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], 
             {{}}]][[mixonMassCode`Private`nBR + 1,
           mixonMassCode`Private`nFR + 1]]], 1]]], 
      SparseArray[{}, {mixonMassCode`Private`stateCount[
         Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
            Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], {{}}]][[
          mixonMassCode`Private`nBL + 1,mixonMassCode`Private`nFL + 1]]], 
        mixonMassCode`Private`stateCount[Insert[PadRight[{}, Insert[0, 0, 2], 
            {{}}], PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{1, 1}, 
            Insert[0, 0, 2], {{}}]][[mixonMassCode`Private`nBR + 1,
          mixonMassCode`Private`nFR + 1]]]}]], {mixonMassCode`Private`nBL, 0, 
      2}, {mixonMassCode`Private`nBR, 0, 2}, {mixonMassCode`Private`nFL, 0, 
      -1 + {3}[[2]]}, {mixonMassCode`Private`nFR, 0, -1 + {3}[[2]]}]
 
mixonMassCode`Private`primBlockNtoN[mixonMassCode`Private`contraction_] = 
    Function[{mixonMassCode`Private`level1, mixonMassCode`Private`level2}, 
     With[{mixonMassCode`Private`lL = mixonMassCode`Private`level1["l"], 
       mixonMassCode`Private`lR = mixonMassCode`Private`level2["l"], 
       mixonMassCode`Private`degBL = mixonMassCode`Private`level1["degB"], 
       mixonMassCode`Private`degBR = mixonMassCode`Private`level2["degB"], 
       mixonMassCode`Private`degFL = mixonMassCode`Private`level1["degF"], 
       mixonMassCode`Private`degFR = mixonMassCode`Private`level2["degF"], 
       mixonMassCode`Private`nB = mixonMassCode`Private`level1["nB"], 
       mixonMassCode`Private`nF = mixonMassCode`Private`level2["nF"]}, 
      SparseArray[Outer[Total[Table[Flatten[#1[[mixonMassCode`Private`kL + 
                1]]] . mixonMassCode`Private`contraction[
              mixonMassCode`Private`nB, mixonMassCode`Private`nF, 
              {mixonMassCode`Private`degBL + mixonMassCode`Private`kL, 
               mixonMassCode`Private`degBR + mixonMassCode`Private`kR}, 
              {mixonMassCode`Private`degFL + mixonMassCode`Private`lL - 
                mixonMassCode`Private`kL, mixonMassCode`Private`degFR + 
                mixonMassCode`Private`lR - mixonMassCode`Private`kR}] . 
             Flatten[#2[[mixonMassCode`Private`kR + 1]]], 
            {mixonMassCode`Private`kL, 0, mixonMassCode`Private`lL}, 
            {mixonMassCode`Private`kR, 0, mixonMassCode`Private`lR}], 2] & , 
         mixonMassCode`Private`level1["states"], mixonMassCode`Private`level2[
          "states"], 1]]*mixonMassCode`Private`factor[
        mixonMassCode`Private`nB + (3*mixonMassCode`Private`nF)/2 + 
         mixonMassCode`Private`degBL + mixonMassCode`Private`degFL + 
         mixonMassCode`Private`lL, mixonMassCode`Private`nB + 
         (3*mixonMassCode`Private`nF)/2 + mixonMassCode`Private`degBR + 
         mixonMassCode`Private`degFR + mixonMassCode`Private`lR]]]
 
mixonMassCode`Private`factor[mixonMassCode`Private`\[CapitalDelta]_, 
     mixonMassCode`Private`\[CapitalDelta]p_] := 
    mixonMassCode`Private`factor[mixonMassCode`Private`\[CapitalDelta], 
      mixonMassCode`Private`\[CapitalDelta]p] = 
     (Sqrt[Gamma[2*mixonMassCode`Private`\[CapitalDelta]]*
         Gamma[2*mixonMassCode`Private`\[CapitalDelta]p]]*
       (-1)^(mixonMassCode`Private`\[CapitalDelta] - 
         mixonMassCode`Private`\[CapitalDelta]p))/
      Gamma[mixonMassCode`Private`\[CapitalDelta] + 
        mixonMassCode`Private`\[CapitalDelta]p - 1]
 
mixonMassCode`Private`scalarMassMonomialBlock[mixonMassCode`Private`nB_, 
     mixonMassCode`Private`nF_, {mixonMassCode`Private`degB1_, 
      mixonMassCode`Private`degB2_}, {mixonMassCode`Private`degF1_, 
      mixonMassCode`Private`degF2_}] := 
    mixonMassCode`Private`scalarMassMonomialBlock[mixonMassCode`Private`nB, 
      mixonMassCode`Private`nF, {mixonMassCode`Private`degB1, 
       mixonMassCode`Private`degB2}, {mixonMassCode`Private`degF1, 
       mixonMassCode`Private`degF2}] = 
     With[{mixonMassCode`Private`a1List = 
        (mixonMassCode`Private`cfBinCount[#1, 
           Max[mixonMassCode`Private`degB1, mixonMassCode`Private`degB2] + 
            1] & ) /@ mixonMassCode`Private`monomialsBoson[
          mixonMassCode`Private`nB, mixonMassCode`Private`degB1], 
       mixonMassCode`Private`a2List = (mixonMassCode`Private`cfBinCount[#1, 
           Max[mixonMassCode`Private`degB1, mixonMassCode`Private`degB2] + 
            1] & ) /@ mixonMassCode`Private`monomialsBoson[
          mixonMassCode`Private`nB, mixonMassCode`Private`degB2], 
       mixonMassCode`Private`b1List = (mixonMassCode`Private`cfBinCount[#1, 
           Max[mixonMassCode`Private`degF1, mixonMassCode`Private`degF2] + 
            1] & ) /@ mixonMassCode`Private`monomialsFermion[
          mixonMassCode`Private`nF, mixonMassCode`Private`degF1], 
       mixonMassCode`Private`b2List = (mixonMassCode`Private`cfBinCount[#1, 
           Max[mixonMassCode`Private`degF1, mixonMassCode`Private`degF2] + 
            1] & ) /@ mixonMassCode`Private`monomialsFermion[
          mixonMassCode`Private`nF, mixonMassCode`Private`degF2]}, 
      SparseArray[Outer[mixonMassCode`Private`scalarMassMixonContraction, 
        Flatten[Outer[List, mixonMassCode`Private`a1List, 
          mixonMassCode`Private`b1List, 1], 1], 
        Flatten[Outer[List, mixonMassCode`Private`a2List, 
          mixonMassCode`Private`b2List, 1], 1], 1]]]
 
mixonMassCode`Private`cfBinCount = CompiledFunction[{11, 12., 5468}, 
     {{_Integer, 1}, _Integer}, {{2, 1, 0}, {2, 0, 0}, {2, 1, 2}}, 
     {{0, {2, 0, 4}}, {1, {2, 0, 2}}}, {0, 10, 0, 0, 3}, 
     {{6, 0, 6}, {6, 4, 3}, {35, 6, 2, 2}, {6, 4, 5}, {3, 2}, 
      {36, 3, 4, 2, 2}, {4, 5, 6, -1}, {33, 0, 6}, {6, 4, 8}, {3, 6}, 
      {37, 0, 8, 2, 1}, {38, 2, 0, 1, 0, 9}, {37, 0, 8, 2, 1}, {12, 9, 2, 7}, 
      {39, 2, 0, 1, 0, 7}, {4, 8, 6, -5}, {1}}, 
     Function[{mixonMassCode`Private`k, mixonMassCode`Private`max}, 
      Module[{mixonMassCode`Private`lst}, mixonMassCode`Private`lst = 
         Table[0, {mixonMassCode`Private`max}]; 
        Scan[mixonMassCode`Private`lst[[#1]]++ & , mixonMassCode`Private`k]; 
        mixonMassCode`Private`lst]], Evaluate, LibraryFunction["/Users/yuan/L\
ibrary/Mathematica/ApplicationData/CCompilerDriver/BuildFolder/Yuans-MacBook-\
Pro-76608/compiledFunction40.dylib", "compiledFunction40", 
      {{Integer, 1, "Constant"}, {Integer, 0, "Constant"}}, {Integer, 1}]]
 
mixonMassCode`Private`monomialsBoson[mixonMassCode`Private`n_, 
     mixonMassCode`Private`deg_] := mixonMassCode`Private`monomialsBoson[
      mixonMassCode`Private`n, mixonMassCode`Private`deg] = 
     IntegerPartitions[mixonMassCode`Private`deg + mixonMassCode`Private`n, 
      {mixonMassCode`Private`n}]
 
mixonMassCode`Private`monomialsFermion[mixonMassCode`Private`n_, 
     mixonMassCode`Private`deg_] := mixonMassCode`Private`monomialsFermion[
      mixonMassCode`Private`n, mixonMassCode`Private`deg] = 
     (#1 + Reverse[Range[mixonMassCode`Private`n] - 1] & ) /@ 
      mixonMassCode`Private`monomialsBoson[mixonMassCode`Private`n, 
       mixonMassCode`Private`deg + mixonMassCode`Private`n - 
        (mixonMassCode`Private`n*(mixonMassCode`Private`n + 1))/2]
 
mixonMassCode`Private`scalarMassMixonContraction[{mixonMassCode`Private`a_, 
      mixonMassCode`Private`b_}, {mixonMassCode`Private`ap_, 
      mixonMassCode`Private`bp_}] := If[mixonMassCode`Private`b != 
      mixonMassCode`Private`bp, 0, 
     mixonMassCode`Private`scalarMassScalarContraction[
      mixonMassCode`Private`a, mixonMassCode`Private`ap]]
 
Attributes[mixonMassCode`Private`scalarMassScalarContraction] = {Orderless}
 
mixonMassCode`Private`scalarMassScalarContraction[{mixonMassCode`Private`a__, 
      0}, {mixonMassCode`Private`ap__, 0}] := 
    mixonMassCode`Private`scalarMassScalarContraction[
     {mixonMassCode`Private`a}, {mixonMassCode`Private`ap}]
 
mixonMassCode`Private`scalarMassScalarContraction[mixonMassCode`Private`a_, 
     mixonMassCode`Private`ap_] := 
    mixonMassCode`Private`scalarMassScalarContraction[
      mixonMassCode`Private`a, mixonMassCode`Private`ap] = 
     Block[{mixonMassCode`Private`diff, mixonMassCode`Private`ki, 
       mixonMassCode`Private`kpj}, mixonMassCode`Private`diff = 
        mixonMassCode`Private`a - mixonMassCode`Private`ap; 
       Switch[Total[Abs[mixonMassCode`Private`diff]], 0, 
        Total[mixonMassCode`Private`ap], 2, mixonMassCode`Private`ki = 
          First[FirstPosition[mixonMassCode`Private`diff, 1]]; 
         mixonMassCode`Private`kpj = First[FirstPosition[
            mixonMassCode`Private`diff, -1]]; 
         Sqrt[If[mixonMassCode`Private`ki > mixonMassCode`Private`kpj, 
            mixonMassCode`Private`kpj/mixonMassCode`Private`ki, 
            mixonMassCode`Private`ki/mixonMassCode`Private`kpj]*
           mixonMassCode`Private`a[[mixonMassCode`Private`ki]]*
           mixonMassCode`Private`ap[[mixonMassCode`Private`kpj]]], _, 0]]
 
mixonMassCode`Private`stateCount[mixonMassCode`Private`lstOfLevels_] := 
    Total[(Length[#states] & ) /@ mixonMassCode`Private`lstOfLevels]
