matPhi4NtoN = Table[If[phi4Code`Private`nBL == phi4Code`Private`nBR && 
       phi4Code`Private`nFL == phi4Code`Private`nFR, 
      Catch[ArrayFlatten[Outer[phi4Code`Private`primBlockNtoNPlus[0], 
         (If[Length[#1] == 0, Throw[{}], #1] & )[
          Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
             Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], 
             {{}}]][[phi4Code`Private`nBL + 1,phi4Code`Private`nFL + 1]]], 
         (If[Length[#1] == 0, Throw[{}], #1] & )[
          Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
             Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], 
             {{}}]][[phi4Code`Private`nBR + 1,phi4Code`Private`nFR + 1]]], 
         1]]], SparseArray[{}, {phi4Code`Private`stateCount[
         Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
            Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], {{}}]][[
          phi4Code`Private`nBL + 1,phi4Code`Private`nFL + 1]]], 
        phi4Code`Private`stateCount[Insert[PadRight[{}, Insert[0, 0, 2], 
            {{}}], PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{1, 1}, 
            Insert[0, 0, 2], {{}}]][[phi4Code`Private`nBR + 1,
          phi4Code`Private`nFR + 1]]]}]], {phi4Code`Private`nBL, 0, 2}, 
     {phi4Code`Private`nBR, 0, 2}, {phi4Code`Private`nFL, 0, -1 + {3}[[2]]}, 
     {phi4Code`Private`nFR, 0, -1 + {3}[[2]]}]
 
phi4Code`Private`primBlockNtoNPlus[phi4Code`Private`dnB_] = 
    Function[{phi4Code`Private`level1, phi4Code`Private`level2}, 
     With[{phi4Code`Private`lL = phi4Code`Private`level1["l"], 
       phi4Code`Private`lR = phi4Code`Private`level2["l"], 
       phi4Code`Private`degBL = phi4Code`Private`level1["degB"], 
       phi4Code`Private`degBR = phi4Code`Private`level2["degB"], 
       phi4Code`Private`degFL = phi4Code`Private`level1["degF"], 
       phi4Code`Private`degFR = phi4Code`Private`level2["degF"], 
       phi4Code`Private`nB = phi4Code`Private`level1["nB"], 
       phi4Code`Private`nF = phi4Code`Private`level2["nF"]}, 
      SparseArray[Outer[Total[Table[Flatten[#1[[phi4Code`Private`kL + 1]]] . 
             phi4Code`Private`monomialBlock[{phi4Code`Private`nB, 
               phi4Code`Private`nB + phi4Code`Private`dnB}, 
              phi4Code`Private`nF, {phi4Code`Private`degBL + 
                phi4Code`Private`kL, phi4Code`Private`degBR + 
                phi4Code`Private`kR}, {phi4Code`Private`degFL + 
                phi4Code`Private`lL - phi4Code`Private`kL, 
               phi4Code`Private`degFR + phi4Code`Private`lR - 
                phi4Code`Private`kR}] . Flatten[#2[[phi4Code`Private`kR + 
                1]]], {phi4Code`Private`kL, 0, phi4Code`Private`lL}, 
            {phi4Code`Private`kR, 0, phi4Code`Private`lR}], 2] & , 
         phi4Code`Private`level1["states"], phi4Code`Private`level2[
          "states"], 1]]*phi4Code`Private`factor[phi4Code`Private`nB + 
         (3*phi4Code`Private`nF)/2 + phi4Code`Private`degBL + 
         phi4Code`Private`degFL + phi4Code`Private`lL, 
        (phi4Code`Private`nB + phi4Code`Private`dnB) + 
         (3*phi4Code`Private`nF)/2 + phi4Code`Private`degBR + 
         phi4Code`Private`degFR + phi4Code`Private`lR]*
       phi4Code`Private`factorM[4]]]
 
phi4Code`Private`monomialBlock[{phi4Code`Private`nBL_, 
      phi4Code`Private`nBR_}, phi4Code`Private`nF_, 
     {phi4Code`Private`degB1_, phi4Code`Private`degB2_}, 
     {phi4Code`Private`degF1_, phi4Code`Private`degF2_}] := 
    phi4Code`Private`monomialBlock[{phi4Code`Private`nBL, 
       phi4Code`Private`nBR}, phi4Code`Private`nF, {phi4Code`Private`degB1, 
       phi4Code`Private`degB2}, {phi4Code`Private`degF1, 
       phi4Code`Private`degF2}] = 
     With[{phi4Code`Private`a1List = (phi4Code`Private`cfBinCount[#1, 
           Max[phi4Code`Private`degB1, phi4Code`Private`degB2] + 1] & ) /@ 
         phi4Code`Private`monomialsBoson[phi4Code`Private`nBL, 
          phi4Code`Private`degB1], phi4Code`Private`a2List = 
        (phi4Code`Private`cfBinCount[#1, Max[phi4Code`Private`degB1, 
             phi4Code`Private`degB2] + 1] & ) /@ 
         phi4Code`Private`monomialsBoson[phi4Code`Private`nBR, 
          phi4Code`Private`degB2], phi4Code`Private`b1List = 
        (phi4Code`Private`cfBinCount[#1, Max[phi4Code`Private`degF1, 
             phi4Code`Private`degF2] + 1] & ) /@ 
         phi4Code`Private`monomialsFermion[phi4Code`Private`nF, 
          phi4Code`Private`degF1], phi4Code`Private`b2List = 
        (phi4Code`Private`cfBinCount[#1, Max[phi4Code`Private`degF1, 
             phi4Code`Private`degF2] + 1] & ) /@ 
         phi4Code`Private`monomialsFermion[phi4Code`Private`nF, 
          phi4Code`Private`degF2]}, SparseArray[
       Outer[phi4Code`Private`monomialMixonContraction, 
        Flatten[Outer[List, phi4Code`Private`a1List, phi4Code`Private`b1List, 
          1], 1], Flatten[Outer[List, phi4Code`Private`a2List, 
          phi4Code`Private`b2List, 1], 1], 1]]]
 
phi4Code`Private`cfBinCount = CompiledFunction[{11, 12., 5468}, 
     {{_Integer, 1}, _Integer}, {{2, 1, 0}, {2, 0, 0}, {2, 1, 2}}, 
     {{0, {2, 0, 4}}, {1, {2, 0, 2}}}, {0, 10, 0, 0, 3}, 
     {{6, 0, 6}, {6, 4, 3}, {35, 6, 2, 2}, {6, 4, 5}, {3, 2}, 
      {36, 3, 4, 2, 2}, {4, 5, 6, -1}, {33, 0, 6}, {6, 4, 8}, {3, 6}, 
      {37, 0, 8, 2, 1}, {38, 2, 0, 1, 0, 9}, {37, 0, 8, 2, 1}, {12, 9, 2, 7}, 
      {39, 2, 0, 1, 0, 7}, {4, 8, 6, -5}, {1}}, 
     Function[{phi4Code`Private`k, phi4Code`Private`max}, 
      Module[{phi4Code`Private`lst}, phi4Code`Private`lst = 
         Table[0, {phi4Code`Private`max}]; 
        Scan[phi4Code`Private`lst[[#1]]++ & , phi4Code`Private`k]; 
        phi4Code`Private`lst]], Evaluate, LibraryFunction["/Users/liam/Librar\
y/Mathematica/ApplicationData/CCompilerDriver/BuildFolder/Macintosh-414-51642\
/compiledFunction3.dylib", "compiledFunction3", {{Integer, 1, "Constant"}, 
       {Integer, 0, "Constant"}}, {Integer, 1}]]
 
phi4Code`Private`monomialsBoson[phi4Code`Private`n_, 
     phi4Code`Private`deg_] := phi4Code`Private`monomialsBoson[
      phi4Code`Private`n, phi4Code`Private`deg] = 
     IntegerPartitions[phi4Code`Private`deg + phi4Code`Private`n, 
      {phi4Code`Private`n}]
 
phi4Code`Private`monomialsFermion[phi4Code`Private`n_, 
     phi4Code`Private`deg_] := phi4Code`Private`monomialsFermion[
      phi4Code`Private`n, phi4Code`Private`deg] = 
     (#1 + Reverse[Range[phi4Code`Private`n] - 1] & ) /@ 
      phi4Code`Private`monomialsBoson[phi4Code`Private`n, 
       phi4Code`Private`deg + phi4Code`Private`n - 
        (phi4Code`Private`n*(phi4Code`Private`n + 1))/2]
 
phi4Code`Private`monomialMixonContraction[{phi4Code`Private`a_, 
      phi4Code`Private`b_}, {phi4Code`Private`ap_, phi4Code`Private`bp_}] := 
    If[phi4Code`Private`b != phi4Code`Private`bp, 0, 
     phi4Code`Private`monomialScalarContraction[4][phi4Code`Private`a, 
      phi4Code`Private`ap]]
 
Attributes[phi4Code`Private`monomialScalarContraction] = {Orderless}
 
phi4Code`Private`monomialScalarContraction[phi4Code`Private`m_][
     phi4Code`Private`kCount_, phi4Code`Private`kpCount_] := 
    phi4Code`Private`monomialScalarContraction[phi4Code`Private`m][
      phi4Code`Private`kCount, phi4Code`Private`kpCount] = 
     Block[{phi4Code`Private`max = Length[phi4Code`Private`kCount], 
       phi4Code`Private`diff, phi4Code`Private`d, phi4Code`Private`cBar, 
       phi4Code`Private`cpBar, phi4Code`Private`kl, phi4Code`Private`kpl, 
       phi4Code`Private`kCommonCount, phi4Code`Private`cBarFree, 
       phi4Code`Private`klFreeSet}, phi4Code`Private`diff = 
        phi4Code`Private`kCount - phi4Code`Private`kpCount; 
       phi4Code`Private`d = (phi4Code`Private`m - 
          Total[Abs[phi4Code`Private`diff]])/2; Switch[phi4Code`Private`d, 0, 
        phi4Code`Private`cBar = Ramp[phi4Code`Private`diff]; 
         phi4Code`Private`cpBar = Ramp[-phi4Code`Private`diff]; 
         phi4Code`Private`kl = phi4Code`Private`cfBinReconstruct[
           phi4Code`Private`cBar]; phi4Code`Private`kpl = 
          phi4Code`Private`cfBinReconstruct[phi4Code`Private`cpBar]; 
         (phi4Code`Private`countingFactor[phi4Code`Private`kCount, 
            phi4Code`Private`kpCount, phi4Code`Private`cBar, 
            phi4Code`Private`cpBar]*phi4Code`Private`binomialMinSum[
            phi4Code`Private`kl, phi4Code`Private`kpl])/
          Sqrt[Times @@ phi4Code`Private`kl*Times @@ phi4Code`Private`kpl], 
        _?Positive, phi4Code`Private`cBar = Ramp[phi4Code`Private`diff]; 
         phi4Code`Private`cpBar = Ramp[-phi4Code`Private`diff]; 
         phi4Code`Private`kl = phi4Code`Private`cfBinReconstruct[
           phi4Code`Private`cBar]; phi4Code`Private`kpl = 
          phi4Code`Private`cfBinReconstruct[phi4Code`Private`cpBar]; 
         phi4Code`Private`kCommonCount = phi4Code`Private`kCount - 
           phi4Code`Private`cBar; phi4Code`Private`klFreeSet = 
          DeleteDuplicatesBy[Subsets[phi4Code`Private`cfBinReconstruct[
             phi4Code`Private`kCommonCount], {phi4Code`Private`d}], Sort]; 
         Sum[phi4Code`Private`cBarFree = phi4Code`Private`cfBinCount[
             phi4Code`Private`klFree, phi4Code`Private`max]; 
           (phi4Code`Private`countingFactor[phi4Code`Private`kCount, 
              phi4Code`Private`kpCount, phi4Code`Private`cBar + 
               phi4Code`Private`cBarFree, phi4Code`Private`cpBar + 
               phi4Code`Private`cBarFree]*phi4Code`Private`binomialMinSum[
              Join[phi4Code`Private`kl, phi4Code`Private`klFree], 
              Join[phi4Code`Private`kpl, phi4Code`Private`klFree]])/
            Sqrt[Times @@ phi4Code`Private`kl*Times @@ phi4Code`Private`kpl*
              Times @@ phi4Code`Private`klFree^2], {phi4Code`Private`klFree, 
           phi4Code`Private`klFreeSet}], _, 0]]
 
phi4Code`Private`cfBinReconstruct = CompiledFunction[{11, 12., 5468}, 
     {{_Integer, 1}}, {{2, 1, 0}, {2, 1, 2}}, {{0, {2, 0, 5}}, 
      {4, {2, 0, 1}}, {1, {2, 0, 0}}}, {2, 11, 0, 0, 3}, 
     {{6, 0, 2}, {6, 0, 6}, {6, 0, 4}, {42, "TotalAll", 2, 1, 0, 2, 0, 1, 2, 
       0, 3}, {6, 3, 7}, {6, 5, 9}, {35, 7, 2, 2}, {6, 5, 8}, {3, 2}, 
      {36, 9, 5, 2, 2}, {4, 8, 7, -1}, {6, 0, 4}, {26, 2, 3, 0}, {2, 0, 17}, 
      {6, 0, 6}, {38, 0, 0, 4, 0, 8}, {26, 6, 8, 1}, {2, 1, 9}, 
      {39, 2, 0, 2, 0, 4}, {6, 2, 7}, {12, 7, 0, 10}, {6, 10, 2}, {6, 6, 8}, 
      {12, 8, 0, 7}, {6, 7, 6}, {3, -10}, {6, 4, 9}, {12, 9, 0, 8}, 
      {6, 8, 4}, {3, -17}, {1}}, Function[{phi4Code`Private`c}, 
      Module[{phi4Code`Private`i = 1, phi4Code`Private`j = 1, 
        phi4Code`Private`k = 1, phi4Code`Private`length = 
         Total[phi4Code`Private`c], phi4Code`Private`reconstruct}, 
       phi4Code`Private`reconstruct = Table[0, {phi4Code`Private`length}]; 
        For[phi4Code`Private`k = 1, phi4Code`Private`i <= 
          phi4Code`Private`length, phi4Code`Private`k++, 
         For[phi4Code`Private`j = 1, phi4Code`Private`j <= 
           phi4Code`Private`c[[phi4Code`Private`k]], phi4Code`Private`j++, 
          phi4Code`Private`reconstruct[[phi4Code`Private`i]] = 
            phi4Code`Private`k; phi4Code`Private`i++]]; 
        phi4Code`Private`reconstruct]], Evaluate, LibraryFunction["/Users/lia\
m/Library/Mathematica/ApplicationData/CCompilerDriver/BuildFolder/Macintosh-4\
14-51642/compiledFunction4.dylib", "compiledFunction4", 
      {{Integer, 1, "Constant"}}, {Integer, 1}]]
 
phi4Code`Private`countingFactor[phi4Code`Private`kCount_, 
     phi4Code`Private`kpCount_, phi4Code`Private`cBar_, 
     phi4Code`Private`cpBar_] := 
    Product[Sqrt[Pochhammer[phi4Code`Private`kCount[[
           phi4Code`Private`\[Lambda]]] - phi4Code`Private`cBar[[
           phi4Code`Private`\[Lambda]]] + 1, phi4Code`Private`cBar[[
          phi4Code`Private`\[Lambda]]]]*Pochhammer[
         phi4Code`Private`kpCount[[phi4Code`Private`\[Lambda]]] - 
          phi4Code`Private`cpBar[[phi4Code`Private`\[Lambda]]] + 1, 
         phi4Code`Private`cpBar[[phi4Code`Private`\[Lambda]]]]]/
      (phi4Code`Private`cBar[[phi4Code`Private`\[Lambda]]]!*
       phi4Code`Private`cpBar[[phi4Code`Private`\[Lambda]]]!), 
     {phi4Code`Private`\[Lambda], Length[phi4Code`Private`cBar]}]
 
phi4Code`Private`binomialMinSum[phi4Code`Private`k_, phi4Code`Private`kp_] := 
    Block[{phi4Code`Private`\[Sigma], phi4Code`Private`\[Sigma]p, 
      phi4Code`Private`n\[Sigma], phi4Code`Private`n\[Sigma]p}, 
     {phi4Code`Private`\[Sigma], phi4Code`Private`n\[Sigma]} = 
       ({Apply[Plus, #1, {1}], (-1)^Length /@ #1} & )[
        Drop[Subsets[phi4Code`Private`k], 1]]; 
      {phi4Code`Private`\[Sigma]p, phi4Code`Private`n\[Sigma]p} = 
       ({Apply[Plus, #1, {1}], (-1)^Length /@ #1} & )[
        Drop[Subsets[phi4Code`Private`kp], 1]]; phi4Code`Private`n\[Sigma] . 
       Outer[Min, phi4Code`Private`\[Sigma], phi4Code`Private`\[Sigma]p] . 
       phi4Code`Private`n\[Sigma]p]
 
phi4Code`Private`factor[phi4Code`Private`\[CapitalDelta]_, 
     phi4Code`Private`\[CapitalDelta]p_] := 
    phi4Code`Private`factor[phi4Code`Private`\[CapitalDelta], 
      phi4Code`Private`\[CapitalDelta]p] = 
     (Sqrt[Gamma[2*phi4Code`Private`\[CapitalDelta]]*
         Gamma[2*phi4Code`Private`\[CapitalDelta]p]]*
       (-1)^(phi4Code`Private`\[CapitalDelta] - 
         phi4Code`Private`\[CapitalDelta]p))/
      Gamma[phi4Code`Private`\[CapitalDelta] + 
        phi4Code`Private`\[CapitalDelta]p - 1]
 
phi4Code`Private`factorM[phi4Code`Private`m_] := 
    phi4Code`Private`factorM[phi4Code`Private`m] = 
     (1/Sqrt[4*Pi])^(phi4Code`Private`m - 2)*(-1)^phi4Code`Private`m
 
phi4Code`Private`stateCount[phi4Code`Private`lstOfLevels_] := 
    Total[(Length[#states] & ) /@ phi4Code`Private`lstOfLevels]
matPhi4NtoN = Table[If[phi4Code`Private`nBL == phi4Code`Private`nBR && 
       phi4Code`Private`nFL == phi4Code`Private`nFR, 
      Catch[ArrayFlatten[Outer[phi4Code`Private`primBlockNtoNPlus[0], 
         (If[Length[#1] == 0, Throw[{}], #1] & )[
          Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
             Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], 
             {{}}]][[phi4Code`Private`nBL + 1,phi4Code`Private`nFL + 1]]], 
         (If[Length[#1] == 0, Throw[{}], #1] & )[
          Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
             Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], 
             {{}}]][[phi4Code`Private`nBR + 1,phi4Code`Private`nFR + 1]]], 
         1]]], SparseArray[{}, {phi4Code`Private`stateCount[
         Insert[PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{}, 
            Insert[0, 0, 2], {{}}], PadRight[{1, 1}, Insert[0, 0, 2], {{}}]][[
          phi4Code`Private`nBL + 1,phi4Code`Private`nFL + 1]]], 
        phi4Code`Private`stateCount[Insert[PadRight[{}, Insert[0, 0, 2], 
            {{}}], PadRight[{}, Insert[0, 0, 2], {{}}], PadRight[{1, 1}, 
            Insert[0, 0, 2], {{}}]][[phi4Code`Private`nBR + 1,
          phi4Code`Private`nFR + 1]]]}]], {phi4Code`Private`nBL, 0, 2}, 
     {phi4Code`Private`nBR, 0, 2}, {phi4Code`Private`nFL, 0, -1 + {3}[[2]]}, 
     {phi4Code`Private`nFR, 0, -1 + {3}[[2]]}]
 
phi4Code`Private`primBlockNtoNPlus[phi4Code`Private`dnB_] = 
    Function[{phi4Code`Private`level1, phi4Code`Private`level2}, 
     With[{phi4Code`Private`lL = phi4Code`Private`level1["l"], 
       phi4Code`Private`lR = phi4Code`Private`level2["l"], 
       phi4Code`Private`degBL = phi4Code`Private`level1["degB"], 
       phi4Code`Private`degBR = phi4Code`Private`level2["degB"], 
       phi4Code`Private`degFL = phi4Code`Private`level1["degF"], 
       phi4Code`Private`degFR = phi4Code`Private`level2["degF"], 
       phi4Code`Private`nB = phi4Code`Private`level1["nB"], 
       phi4Code`Private`nF = phi4Code`Private`level2["nF"]}, 
      SparseArray[Outer[Total[Table[Flatten[#1[[phi4Code`Private`kL + 1]]] . 
             phi4Code`Private`monomialBlock[{phi4Code`Private`nB, 
               phi4Code`Private`nB + phi4Code`Private`dnB}, 
              phi4Code`Private`nF, {phi4Code`Private`degBL + 
                phi4Code`Private`kL, phi4Code`Private`degBR + 
                phi4Code`Private`kR}, {phi4Code`Private`degFL + 
                phi4Code`Private`lL - phi4Code`Private`kL, 
               phi4Code`Private`degFR + phi4Code`Private`lR - 
                phi4Code`Private`kR}] . Flatten[#2[[phi4Code`Private`kR + 
                1]]], {phi4Code`Private`kL, 0, phi4Code`Private`lL}, 
            {phi4Code`Private`kR, 0, phi4Code`Private`lR}], 2] & , 
         phi4Code`Private`level1["states"], phi4Code`Private`level2[
          "states"], 1]]*phi4Code`Private`factor[phi4Code`Private`nB + 
         (3*phi4Code`Private`nF)/2 + phi4Code`Private`degBL + 
         phi4Code`Private`degFL + phi4Code`Private`lL, 
        (phi4Code`Private`nB + phi4Code`Private`dnB) + 
         (3*phi4Code`Private`nF)/2 + phi4Code`Private`degBR + 
         phi4Code`Private`degFR + phi4Code`Private`lR]*
       phi4Code`Private`factorM[4]]]
 
phi4Code`Private`monomialBlock[{phi4Code`Private`nBL_, 
      phi4Code`Private`nBR_}, phi4Code`Private`nF_, 
     {phi4Code`Private`degB1_, phi4Code`Private`degB2_}, 
     {phi4Code`Private`degF1_, phi4Code`Private`degF2_}] := 
    phi4Code`Private`monomialBlock[{phi4Code`Private`nBL, 
       phi4Code`Private`nBR}, phi4Code`Private`nF, {phi4Code`Private`degB1, 
       phi4Code`Private`degB2}, {phi4Code`Private`degF1, 
       phi4Code`Private`degF2}] = 
     With[{phi4Code`Private`a1List = (phi4Code`Private`cfBinCount[#1, 
           Max[phi4Code`Private`degB1, phi4Code`Private`degB2] + 1] & ) /@ 
         phi4Code`Private`monomialsBoson[phi4Code`Private`nBL, 
          phi4Code`Private`degB1], phi4Code`Private`a2List = 
        (phi4Code`Private`cfBinCount[#1, Max[phi4Code`Private`degB1, 
             phi4Code`Private`degB2] + 1] & ) /@ 
         phi4Code`Private`monomialsBoson[phi4Code`Private`nBR, 
          phi4Code`Private`degB2], phi4Code`Private`b1List = 
        (phi4Code`Private`cfBinCount[#1, Max[phi4Code`Private`degF1, 
             phi4Code`Private`degF2] + 1] & ) /@ 
         phi4Code`Private`monomialsFermion[phi4Code`Private`nF, 
          phi4Code`Private`degF1], phi4Code`Private`b2List = 
        (phi4Code`Private`cfBinCount[#1, Max[phi4Code`Private`degF1, 
             phi4Code`Private`degF2] + 1] & ) /@ 
         phi4Code`Private`monomialsFermion[phi4Code`Private`nF, 
          phi4Code`Private`degF2]}, SparseArray[
       Outer[phi4Code`Private`monomialMixonContraction, 
        Flatten[Outer[List, phi4Code`Private`a1List, phi4Code`Private`b1List, 
          1], 1], Flatten[Outer[List, phi4Code`Private`a2List, 
          phi4Code`Private`b2List, 1], 1], 1]]]
 
phi4Code`Private`cfBinCount = CompiledFunction[{11, 12., 5468}, 
     {{_Integer, 1}, _Integer}, {{2, 1, 0}, {2, 0, 0}, {2, 1, 2}}, 
     {{0, {2, 0, 4}}, {1, {2, 0, 2}}}, {0, 10, 0, 0, 3}, 
     {{6, 0, 6}, {6, 4, 3}, {35, 6, 2, 2}, {6, 4, 5}, {3, 2}, 
      {36, 3, 4, 2, 2}, {4, 5, 6, -1}, {33, 0, 6}, {6, 4, 8}, {3, 6}, 
      {37, 0, 8, 2, 1}, {38, 2, 0, 1, 0, 9}, {37, 0, 8, 2, 1}, {12, 9, 2, 7}, 
      {39, 2, 0, 1, 0, 7}, {4, 8, 6, -5}, {1}}, 
     Function[{phi4Code`Private`k, phi4Code`Private`max}, 
      Module[{phi4Code`Private`lst}, phi4Code`Private`lst = 
         Table[0, {phi4Code`Private`max}]; 
        Scan[phi4Code`Private`lst[[#1]]++ & , phi4Code`Private`k]; 
        phi4Code`Private`lst]], Evaluate, LibraryFunction["/Users/yuan/Librar\
y/Mathematica/ApplicationData/CCompilerDriver/BuildFolder/Yuans-MacBook-Pro-7\
6608/compiledFunction41.dylib", "compiledFunction41", 
      {{Integer, 1, "Constant"}, {Integer, 0, "Constant"}}, {Integer, 1}]]
 
phi4Code`Private`monomialsBoson[phi4Code`Private`n_, 
     phi4Code`Private`deg_] := phi4Code`Private`monomialsBoson[
      phi4Code`Private`n, phi4Code`Private`deg] = 
     IntegerPartitions[phi4Code`Private`deg + phi4Code`Private`n, 
      {phi4Code`Private`n}]
 
phi4Code`Private`monomialsFermion[phi4Code`Private`n_, 
     phi4Code`Private`deg_] := phi4Code`Private`monomialsFermion[
      phi4Code`Private`n, phi4Code`Private`deg] = 
     (#1 + Reverse[Range[phi4Code`Private`n] - 1] & ) /@ 
      phi4Code`Private`monomialsBoson[phi4Code`Private`n, 
       phi4Code`Private`deg + phi4Code`Private`n - 
        (phi4Code`Private`n*(phi4Code`Private`n + 1))/2]
 
phi4Code`Private`monomialMixonContraction[{phi4Code`Private`a_, 
      phi4Code`Private`b_}, {phi4Code`Private`ap_, phi4Code`Private`bp_}] := 
    If[phi4Code`Private`b != phi4Code`Private`bp, 0, 
     phi4Code`Private`monomialScalarContraction[4][phi4Code`Private`a, 
      phi4Code`Private`ap]]
 
Attributes[phi4Code`Private`monomialScalarContraction] = {Orderless}
 
phi4Code`Private`monomialScalarContraction[phi4Code`Private`m_][
     phi4Code`Private`kCount_, phi4Code`Private`kpCount_] := 
    phi4Code`Private`monomialScalarContraction[phi4Code`Private`m][
      phi4Code`Private`kCount, phi4Code`Private`kpCount] = 
     Block[{phi4Code`Private`max = Length[phi4Code`Private`kCount], 
       phi4Code`Private`diff, phi4Code`Private`d, phi4Code`Private`cBar, 
       phi4Code`Private`cpBar, phi4Code`Private`kl, phi4Code`Private`kpl, 
       phi4Code`Private`kCommonCount, phi4Code`Private`cBarFree, 
       phi4Code`Private`klFreeSet}, phi4Code`Private`diff = 
        phi4Code`Private`kCount - phi4Code`Private`kpCount; 
       phi4Code`Private`d = (phi4Code`Private`m - 
          Total[Abs[phi4Code`Private`diff]])/2; Switch[phi4Code`Private`d, 0, 
        phi4Code`Private`cBar = Ramp[phi4Code`Private`diff]; 
         phi4Code`Private`cpBar = Ramp[-phi4Code`Private`diff]; 
         phi4Code`Private`kl = phi4Code`Private`cfBinReconstruct[
           phi4Code`Private`cBar]; phi4Code`Private`kpl = 
          phi4Code`Private`cfBinReconstruct[phi4Code`Private`cpBar]; 
         (phi4Code`Private`countingFactor[phi4Code`Private`kCount, 
            phi4Code`Private`kpCount, phi4Code`Private`cBar, 
            phi4Code`Private`cpBar]*phi4Code`Private`binomialMinSum[
            phi4Code`Private`kl, phi4Code`Private`kpl])/
          Sqrt[Times @@ phi4Code`Private`kl*Times @@ phi4Code`Private`kpl], 
        _?Positive, phi4Code`Private`cBar = Ramp[phi4Code`Private`diff]; 
         phi4Code`Private`cpBar = Ramp[-phi4Code`Private`diff]; 
         phi4Code`Private`kl = phi4Code`Private`cfBinReconstruct[
           phi4Code`Private`cBar]; phi4Code`Private`kpl = 
          phi4Code`Private`cfBinReconstruct[phi4Code`Private`cpBar]; 
         phi4Code`Private`kCommonCount = phi4Code`Private`kCount - 
           phi4Code`Private`cBar; phi4Code`Private`klFreeSet = 
          DeleteDuplicatesBy[Subsets[phi4Code`Private`cfBinReconstruct[
             phi4Code`Private`kCommonCount], {phi4Code`Private`d}], Sort]; 
         Sum[phi4Code`Private`cBarFree = phi4Code`Private`cfBinCount[
             phi4Code`Private`klFree, phi4Code`Private`max]; 
           (phi4Code`Private`countingFactor[phi4Code`Private`kCount, 
              phi4Code`Private`kpCount, phi4Code`Private`cBar + 
               phi4Code`Private`cBarFree, phi4Code`Private`cpBar + 
               phi4Code`Private`cBarFree]*phi4Code`Private`binomialMinSum[
              Join[phi4Code`Private`kl, phi4Code`Private`klFree], 
              Join[phi4Code`Private`kpl, phi4Code`Private`klFree]])/
            Sqrt[Times @@ phi4Code`Private`kl*Times @@ phi4Code`Private`kpl*
              Times @@ phi4Code`Private`klFree^2], {phi4Code`Private`klFree, 
           phi4Code`Private`klFreeSet}], _, 0]]
 
phi4Code`Private`cfBinReconstruct = CompiledFunction[{11, 12., 5468}, 
     {{_Integer, 1}}, {{2, 1, 0}, {2, 1, 2}}, {{0, {2, 0, 5}}, 
      {4, {2, 0, 1}}, {1, {2, 0, 0}}}, {2, 11, 0, 0, 3}, 
     {{6, 0, 2}, {6, 0, 6}, {6, 0, 4}, {42, "TotalAll", 2, 1, 0, 2, 0, 1, 2, 
       0, 3}, {6, 3, 7}, {6, 5, 9}, {35, 7, 2, 2}, {6, 5, 8}, {3, 2}, 
      {36, 9, 5, 2, 2}, {4, 8, 7, -1}, {6, 0, 4}, {26, 2, 3, 0}, {2, 0, 17}, 
      {6, 0, 6}, {38, 0, 0, 4, 0, 8}, {26, 6, 8, 1}, {2, 1, 9}, 
      {39, 2, 0, 2, 0, 4}, {6, 2, 7}, {12, 7, 0, 10}, {6, 10, 2}, {6, 6, 8}, 
      {12, 8, 0, 7}, {6, 7, 6}, {3, -10}, {6, 4, 9}, {12, 9, 0, 8}, 
      {6, 8, 4}, {3, -17}, {1}}, Function[{phi4Code`Private`c}, 
      Module[{phi4Code`Private`i = 1, phi4Code`Private`j = 1, 
        phi4Code`Private`k = 1, phi4Code`Private`length = 
         Total[phi4Code`Private`c], phi4Code`Private`reconstruct}, 
       phi4Code`Private`reconstruct = Table[0, {phi4Code`Private`length}]; 
        For[phi4Code`Private`k = 1, phi4Code`Private`i <= 
          phi4Code`Private`length, phi4Code`Private`k++, 
         For[phi4Code`Private`j = 1, phi4Code`Private`j <= 
           phi4Code`Private`c[[phi4Code`Private`k]], phi4Code`Private`j++, 
          phi4Code`Private`reconstruct[[phi4Code`Private`i]] = 
            phi4Code`Private`k; phi4Code`Private`i++]]; 
        phi4Code`Private`reconstruct]], Evaluate, LibraryFunction["/Users/yua\
n/Library/Mathematica/ApplicationData/CCompilerDriver/BuildFolder/Yuans-MacBo\
ok-Pro-76608/compiledFunction42.dylib", "compiledFunction42", 
      {{Integer, 1, "Constant"}}, {Integer, 1}]]
 
phi4Code`Private`countingFactor[phi4Code`Private`kCount_, 
     phi4Code`Private`kpCount_, phi4Code`Private`cBar_, 
     phi4Code`Private`cpBar_] := 
    Product[Sqrt[Pochhammer[phi4Code`Private`kCount[[
           phi4Code`Private`\[Lambda]]] - phi4Code`Private`cBar[[
           phi4Code`Private`\[Lambda]]] + 1, phi4Code`Private`cBar[[
          phi4Code`Private`\[Lambda]]]]*Pochhammer[
         phi4Code`Private`kpCount[[phi4Code`Private`\[Lambda]]] - 
          phi4Code`Private`cpBar[[phi4Code`Private`\[Lambda]]] + 1, 
         phi4Code`Private`cpBar[[phi4Code`Private`\[Lambda]]]]]/
      (phi4Code`Private`cBar[[phi4Code`Private`\[Lambda]]]!*
       phi4Code`Private`cpBar[[phi4Code`Private`\[Lambda]]]!), 
     {phi4Code`Private`\[Lambda], Length[phi4Code`Private`cBar]}]
 
phi4Code`Private`binomialMinSum[phi4Code`Private`k_, phi4Code`Private`kp_] := 
    Block[{phi4Code`Private`\[Sigma], phi4Code`Private`\[Sigma]p, 
      phi4Code`Private`n\[Sigma], phi4Code`Private`n\[Sigma]p}, 
     {phi4Code`Private`\[Sigma], phi4Code`Private`n\[Sigma]} = 
       ({Apply[Plus, #1, {1}], (-1)^Length /@ #1} & )[
        Drop[Subsets[phi4Code`Private`k], 1]]; 
      {phi4Code`Private`\[Sigma]p, phi4Code`Private`n\[Sigma]p} = 
       ({Apply[Plus, #1, {1}], (-1)^Length /@ #1} & )[
        Drop[Subsets[phi4Code`Private`kp], 1]]; phi4Code`Private`n\[Sigma] . 
       Outer[Min, phi4Code`Private`\[Sigma], phi4Code`Private`\[Sigma]p] . 
       phi4Code`Private`n\[Sigma]p]
 
phi4Code`Private`factor[phi4Code`Private`\[CapitalDelta]_, 
     phi4Code`Private`\[CapitalDelta]p_] := 
    phi4Code`Private`factor[phi4Code`Private`\[CapitalDelta], 
      phi4Code`Private`\[CapitalDelta]p] = 
     (Sqrt[Gamma[2*phi4Code`Private`\[CapitalDelta]]*
         Gamma[2*phi4Code`Private`\[CapitalDelta]p]]*
       (-1)^(phi4Code`Private`\[CapitalDelta] - 
         phi4Code`Private`\[CapitalDelta]p))/
      Gamma[phi4Code`Private`\[CapitalDelta] + 
        phi4Code`Private`\[CapitalDelta]p - 1]
 
phi4Code`Private`factorM[phi4Code`Private`m_] := 
    phi4Code`Private`factorM[phi4Code`Private`m] = 
     (1/Sqrt[4*Pi])^(phi4Code`Private`m - 2)*(-1)^phi4Code`Private`m
 
phi4Code`Private`stateCount[phi4Code`Private`lstOfLevels_] := 
    Total[(Length[#states] & ) /@ phi4Code`Private`lstOfLevels]
