basisBosonPre = {Table[resPreTrans[[n,deg + 1]], 
      {deg, 0, \[CapitalDelta]max}, {n, 1, \[CapitalDelta]max - deg}]}
 
resPreTrans = Table[Print["t=", AbsoluteTime[] - 
        3.796667901515395`16.331977599771694*^9]; Print["n@ ", n]; 
      Table[joaoPolySet[n, deg], {deg, 0, \[CapitalDelta]max - n}], 
     {n, 1, \[CapitalDelta]max}]
 
joaoPolySet[1, 0] = {{1}}
 
joaoPolySet[1, Except[0]] = {}
 
joaoPolySet[n_, deg_] := joaoPolySet[n, deg] = 
     Flatten[Reap[Do[If[numStates[n - 1, degP] != 0, 
          Sow[joaoPolySet[n - 1, degP] . recMatTrans[n, deg, degP]]], 
         {degP, deg, 0, -n}]][[2]], 2]
 
numStates[n_, bDeg_] := With[{\[CapitalDelta] = n + bDeg}, 
     Coefficient[Normal[Series[x^n*Product[1/(1 - x^k), {k, 2, n}], 
        {x, 0, \[CapitalDelta]}]], x^\[CapitalDelta]]]
 
recMatTrans[n_, l_, lp_] := With[{ks = IntegerPartitions[l + n, {n}] - 1, 
      kps = IntegerPartitions[lp + n - 1, {n - 1}] - 1, 
      recPair = Function[{k, kp}, With[{kDist = Reverse[DeleteDuplicates[k]], 
          kPoss = Reverse[DeleteDuplicates[Table[Drop[k, {i}], 
              {i, Length[k]}]]], dl = l - lp}, 
         Total[Array[joaoCoeff[1, lp + n - 1, dl, kDist[[#1]]]*
             permutedMultinomial[kPoss[[#1]], kp] & , 
           First[FirstPosition[dl - kDist, _?NonPositive, {Length[kDist]}, 
             1]]]]]]}, Transpose[Outer[recPair, ks, kps, 1]]]
 
joaoCoeff[degL_, degR_, l_, k_] := joaoCoeff[degL, degR, l, k] = 
     ((-1)^k*Gamma[2*degL + l]*Gamma[2*degR + l])/
      (k!*(l - k)!*Gamma[2*degL + k]*Gamma[2*degR + l - k])
 
permutedMultinomial[kp_List, kpp_List] /; Length[kp] >= 1 := 
    permutedMultinomial[kp, kpp] = With[{kpi = DeleteDuplicates[kp], 
       kpRest = DeleteDuplicates[Table[Drop[kp, {i}], {i, Length[kp]}]], 
       s = Total[kp] - Total[kpp]}, 
      Total[Array[Catch[Binomial[s, (If[#1 < 0, Throw[0], #1] & )[
             kpi[[#1]] - First[kpp]]]*permutedMultinomial[kpRest[[#1]], 
            Drop[kpp, 1]]] & , Length[kpi]]]]
 
permutedMultinomial[kp_List, kpp_List] /; Length[kp] == 0 := 
    permutedMultinomial[kp, kpp] = 1
basisBosonPre = {Table[resPreTrans[[n,deg + 1]], 
      {deg, 0, \[CapitalDelta]max}, {n, 1, \[CapitalDelta]max - deg}]}
 
resPreTrans = Table[Print["t=", AbsoluteTime[] - 
        3.796667676635099`16.331977574048015*^9]; Print["n@ ", n]; 
      Table[joaoPolySet[n, deg], {deg, 0, \[CapitalDelta]max - n}], 
     {n, 1, \[CapitalDelta]max}]
 
joaoPolySet[1, 0] = {{1}}
 
joaoPolySet[1, Except[0]] = {}
 
joaoPolySet[n_, deg_] := joaoPolySet[n, deg] = 
     Flatten[Reap[Do[If[numStates[n - 1, degP] != 0, 
          Sow[joaoPolySet[n - 1, degP] . recMatTrans[n, deg, degP]]], 
         {degP, deg, 0, -n}]][[2]], 2]
 
numStates[n_, bDeg_] := With[{\[CapitalDelta] = n + bDeg}, 
     Coefficient[Normal[Series[x^n*Product[1/(1 - x^k), {k, 2, n}], 
        {x, 0, \[CapitalDelta]}]], x^\[CapitalDelta]]]
 
recMatTrans[n_, l_, lp_] := With[{ks = IntegerPartitions[l + n, {n}] - 1, 
      kps = IntegerPartitions[lp + n - 1, {n - 1}] - 1, 
      recPair = Function[{k, kp}, With[{kDist = Reverse[DeleteDuplicates[k]], 
          kPoss = Reverse[DeleteDuplicates[Table[Drop[k, {i}], 
              {i, Length[k]}]]], dl = l - lp}, 
         Total[Array[joaoCoeff[1, lp + n - 1, dl, kDist[[#1]]]*
             permutedMultinomial[kPoss[[#1]], kp] & , 
           First[FirstPosition[dl - kDist, _?NonPositive, {Length[kDist]}, 
             1]]]]]]}, Transpose[Outer[recPair, ks, kps, 1]]]
 
joaoCoeff[degL_, degR_, l_, k_] := joaoCoeff[degL, degR, l, k] = 
     ((-1)^k*Gamma[2*degL + l]*Gamma[2*degR + l])/
      (k!*(l - k)!*Gamma[2*degL + k]*Gamma[2*degR + l - k])
 
permutedMultinomial[kp_List, kpp_List] /; Length[kp] >= 1 := 
    permutedMultinomial[kp, kpp] = With[{kpi = DeleteDuplicates[kp], 
       kpRest = DeleteDuplicates[Table[Drop[kp, {i}], {i, Length[kp]}]], 
       s = Total[kp] - Total[kpp]}, 
      Total[Array[Catch[Binomial[s, (If[#1 < 0, Throw[0], #1] & )[
             kpi[[#1]] - First[kpp]]]*permutedMultinomial[kpRest[[#1]], 
            Drop[kpp, 1]]] & , Length[kpi]]]]
 
permutedMultinomial[kp_List, kpp_List] /; Length[kp] == 0 := 
    permutedMultinomial[kp, kpp] = 1
